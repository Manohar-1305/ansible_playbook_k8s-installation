<<<<<<< HEAD
INVENTORY_FILE="ansible-playbook-k8s-installation/ansible/inventories/inventory.ini"
LOG_FILE="ansible_script.log"

export AWS_REGION=ap-south-1

log() {
  local message="$1"
  echo "$(date +"%Y-%m-%d %H:%M:%S") - $message" | sudo tee -a "$LOG_FILE"
}

# Function to update or add entries
update_entry() {
  local section=$1
  local host=$2
  local ip=$3

  log "Updating entry: Section: $section, Host: $host, IP: $ip"

  # Ensure the section header exists
  if ! grep -q "^\[$section\]" "$INVENTORY_FILE"; then
    log "Section $section not found. Adding section header."
    sudo bash -c "echo -e '\n[$section]' >>'$INVENTORY_FILE'"
  fi

  # Remove existing entry if it exists
  sudo sed -i "/^\[$section\]/,/^\[.*\]/{/^$host ansible_host=.*/d}" "$INVENTORY_FILE"

  # Add or update the entry
  sudo sed -i "/^\[$section\]/a $host ansible_host=$ip" "$INVENTORY_FILE"
}

# Check if the inventory file exists
if [ ! -f "$INVENTORY_FILE" ]; then
  log "Inventory file not found: $INVENTORY_FILE"
  exit 1
fi

# Fetch NFS IP and update the inventory file
NFS_IP=$(aws ec2 describe-instances --region ap-south-1 --filters "Name=tag:Name,Values=nfs" --query "Reservations[*].Instances[*].PublicIpAddress" --output text)

if [ -z "$NFS_IP" ]; then
  log "Failed to fetch NFS IP"
  exit 1
fi
log "NFS IP: $NFS_IP"

# Fetch the Bastion host public IP
log "Fetching Bastion IP"
BASTION_IP=$(aws ec2 describe-instances --region ap-south-1 --filters "Name=tag:Name,Values=bastion" --query "Reservations[*].Instances[*].PublicIpAddress" --output text)

if [ -z "$BASTION_IP" ]; then
  log "Failed to fetch Bastion IP"
  exit 1
fi
log "Bastion IP: $BASTION_IP"

# Fetch and assign IP addresses for master instances dynamically
for MASTER in master1 master2 master3; do
  log "Fetching IP for $MASTER"
  IP_VAR="${MASTER^^}_IP"  # Variable name (e.g., MASTER1_IP)
  IP=$(aws ec2 describe-instances --region ap-south-1 --filters "Name=tag:Name,Values=$MASTER" --query "Reservations[*].Instances[*].PrivateIpAddress" --output text)

  if [ -z "$IP" ]; then
    log "Failed to fetch IP for $MASTER"
    exit 1
  fi

  eval "$IP_VAR=\"$IP\""  # Assign IP to the variable (e.g., MASTER1_IP="xxx.xxx.xxx.xxx")
  log "$MASTER IP: $IP"
done

# Fetch and assign IP addresses for worker nodes dynamically
for WORKER in worker1 worker2 worker3; do
  log "Fetching IP for $WORKER"
  IP_VAR="${WORKER^^}_IP"  # Variable name (e.g., WORKER1_IP)
  IP=$(aws ec2 describe-instances --region ap-south-1 --filters "Name=tag:Name,Values=$WORKER" --query "Reservations[*].Instances[*].PrivateIpAddress" --output text)

  if [ -z "$IP" ]; then
    log "Failed to fetch IP for $WORKER"
    exit 1
  fi

  eval "$IP_VAR=\"$IP\""  # Assign IP to the variable (e.g., WORKER1_IP="xxx.xxx.xxx.xxx")
  log "$WORKER IP: $IP"
done

sleep 120

# Update entries for controlplane section in sequence
log "Updating controlplane section in sequence"
update_entry "controlplane" "master3" "$MASTER3_IP"
update_entry "controlplane" "master2" "$MASTER2_IP"
update_entry "controlplane" "master1" "$MASTER1_IP"

# Update entries for worker nodes
log "Updating workers section in sequence"
update_entry "node" "worker3" "$WORKER3_IP"
update_entry "node" "worker2" "$WORKER2_IP"
update_entry "node" "worker1" "$WORKER1_IP"

# Update entries for bastion and nfs
update_entry "local" "bastion" "$BASTION_IP"
update_entry "nfs-server" "nfs" "$NFS_IP"
log "Script execution completed successfully"
=======
INVENTORY_FILE="ansible-playbook-k8s-installation/ansible/inventories/inventory.ini"
LOG_FILE="ansible_script.log"

export AWS_REGION=ap-south-1

log() {
  local message="$1"
  echo "$(date +"%Y-%m-%d %H:%M:%S") - $message" | sudo tee -a "$LOG_FILE"
}

# Function to update or add entries
update_entry() {
  local section=$1
  local host=$2
  local ip=$3

  log "Updating entry: Section: $section, Host: $host, IP: $ip"

  # Ensure the section header exists
  if ! grep -q "^\[$section\]" "$INVENTORY_FILE"; then
    log "Section $section not found. Adding section header."
    sudo bash -c "echo -e '\n[$section]' >>'$INVENTORY_FILE'"
  fi

  # Remove existing entry if it exists
  sudo sed -i "/^\[$section\]/,/^\[.*\]/{/^$host ansible_host=.*/d}" "$INVENTORY_FILE"

  # Add or update the entry
  sudo sed -i "/^\[$section\]/a $host ansible_host=$ip" "$INVENTORY_FILE"
}

# Check if the inventory file exists
if [ ! -f "$INVENTORY_FILE" ]; then
  log "Inventory file not found: $INVENTORY_FILE"
  exit 1
fi

# Fetch NFS IP and update the inventory file
NFS_IP=$(aws ec2 describe-instances --region ap-south-1 --filters "Name=tag:Name,Values=nfs" --query "Reservations[*].Instances[*].PublicIpAddress" --output text)

if [ -z "$NFS_IP" ]; then
  log "Failed to fetch NFS IP"
  exit 1
fi
log "NFS IP: $NFS_IP"

# Fetch the Bastion host public IP
log "Fetching Bastion IP"
BASTION_IP=$(aws ec2 describe-instances --region ap-south-1 --filters "Name=tag:Name,Values=bastion" --query "Reservations[*].Instances[*].PublicIpAddress" --output text)

if [ -z "$BASTION_IP" ]; then
  log "Failed to fetch Bastion IP"
  exit 1
fi
log "Bastion IP: $BASTION_IP"

# Fetch and assign IP addresses for master instances dynamically
for MASTER in master1 master2 master3; do
  log "Fetching IP for $MASTER"
  IP_VAR="${MASTER^^}_IP"  # Variable name (e.g., MASTER1_IP)
  IP=$(aws ec2 describe-instances --region ap-south-1 --filters "Name=tag:Name,Values=$MASTER" --query "Reservations[*].Instances[*].PrivateIpAddress" --output text)

  if [ -z "$IP" ]; then
    log "Failed to fetch IP for $MASTER"
    exit 1
  fi

  eval "$IP_VAR=\"$IP\""  # Assign IP to the variable (e.g., MASTER1_IP="xxx.xxx.xxx.xxx")
  log "$MASTER IP: $IP"
done

# Fetch and assign IP addresses for worker nodes dynamically
for WORKER in worker1 worker2 worker3; do
  log "Fetching IP for $WORKER"
  IP_VAR="${WORKER^^}_IP"  # Variable name (e.g., WORKER1_IP)
  IP=$(aws ec2 describe-instances --region ap-south-1 --filters "Name=tag:Name,Values=$WORKER" --query "Reservations[*].Instances[*].PrivateIpAddress" --output text)

  if [ -z "$IP" ]; then
    log "Failed to fetch IP for $WORKER"
    exit 1
  fi

  eval "$IP_VAR=\"$IP\""  # Assign IP to the variable (e.g., WORKER1_IP="xxx.xxx.xxx.xxx")
  log "$WORKER IP: $IP"
done

sleep 120

# Update entries for controlplane section in sequence
log "Updating controlplane section in sequence"
update_entry "controlplane" "master3" "$MASTER3_IP"
update_entry "controlplane" "master2" "$MASTER2_IP"
update_entry "controlplane" "master1" "$MASTER1_IP"

# Update entries for worker nodes
log "Updating workers section in sequence"
update_entry "node" "worker3" "$WORKER3_IP"
update_entry "node" "worker2" "$WORKER2_IP"
update_entry "node" "worker1" "$WORKER1_IP"

# Update entries for bastion and nfs
update_entry "local" "bastion" "$BASTION_IP"
update_entry "nfs-server" "nfs" "$NFS_IP"
log "Script execution completed successfully"
>>>>>>> 8268c6b (added files)
